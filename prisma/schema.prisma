// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CARD
  WALLET
  CASH_ON_DELIVERY
  PAYPAL
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

model User {
  id             String    @id @default(uuid()) @map("_id")
  email          String    @unique
  password       String
  fullName       String?
  role           UserRole  @default(CUSTOMER)
  phone          String?   @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isVerified     Boolean   @default(false)

  // relations
  addresses      Address[]
  orders         Order[]
  cart           Cart?
  reviews        Review[]
}

model Address {
  id         String   @id @default(uuid()) @map("_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  label      String?        // e.g., "Home", "Office"
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relations
  shippingOrders Order[] @relation("OrderShippingAddress")
  billingOrders  Order[] @relation("OrderBillingAddress")
}

model Category {
  id        String    @id @default(uuid()) @map("_id")
  name      String
  slug      String    @unique
  parent    Category? @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId  String?
  children  Category[] @relation("CategoryToParent")
  products  Product[] 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name])
}

model Product {
  id            String         @id @default(uuid()) @map("_id")
  title         String
  slug          String         @unique
  description   String?
  sku           String?
  price         Float
  compareAt     Float?
  isPublished   Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // relations
  category      Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId    String?
  images        ProductImage[]
  variants      ProductVariant[]
  reviews       Review[]

  @@index([title])
  @@index([price])
}

model ProductImage {
  id        String   @id @default(uuid()) @map("_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  altText   String?
  position  Int      @default(0)
  createdAt DateTime @default(now())
}

model ProductVariant {
  id            String   @id @default(uuid()) @map("_id")
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  title         String?    // e.g., "Red / XL"
  sku           String?    
  price         Float
  weightGrams   Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  inventory     Inventory?
  cartItems     CartItem[]
  orderItems    OrderItem[]

  @@unique([productId, sku], name: "unique_variant_sku_per_product")
}

model Inventory {
  id               String   @id @default(uuid()) @map("_id")
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String   @unique
  stock            Int      @default(0)
  reserved         Int      @default(0) // for pending orders
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Cart {
  id         String     @id @default(uuid()) @map("_id")
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String     @unique
  items      CartItem[]
  updatedAt  DateTime   @updatedAt
  createdAt  DateTime   @default(now())
}

model CartItem {
  id               String         @id @default(uuid()) @map("_id")
  cart             Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId           String
  productVariant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Restrict)
  variantId        String
  quantity         Int            @default(1)
  unitPrice        Float          // snapshot of price
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([cartId, variantId])
}

model Order {
  id             String        @id @default(uuid()) @map("_id")
  user           User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?
  status         OrderStatus   @default(PENDING)
  totalAmount    Float
  shippingAmount Float?
  taxAmount      Float?
  shippingAddress Address?     @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress  Address?     @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId  String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  items          OrderItem[]
  payments       Payment[]
  trackingNumber String?       @unique
  note           String?
  isPaid         Boolean       @default(false)
}

model OrderItem {
  id               String         @id @default(uuid()) @map("_id")
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId          String
  productVariant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Restrict)
  variantId        String
  quantity         Int
  unitPrice        Float          // snapshot
  subtotal         Float          // quantity * unitPrice
  createdAt        DateTime       @default(now())
}

model Payment {
  id            String         @id @default(uuid()) @map("_id")
  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String
  method        PaymentMethod
  status        PaymentStatus  @default(PENDING)
  amount        Float
  providerTxnId String?
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Review {
  id          String   @id @default(uuid()) @map("_id")
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  rating      Int      @default(5)
  title       String?
  body        String?
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([productId])
}
